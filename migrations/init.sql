\c shop;

CREATE TABLE IF NOT EXISTS public.merchandise (
    id INT NOT NULL
        GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT UNIQUE NOT NULL,
    price SMALLINT
);

INSERT INTO merchandise (name, price)
VALUES
    ('t-shirt', 80),
    ('cup', 20),
    ('book', 50),
    ('pen', 10),
    ('powerbank', 200),
    ('hoody', 300),
    ('umbrella', 200),
    ('socks', 10),
    ('wallet', 50),
    ('pink-hoody', 500);

CREATE TABLE IF NOT EXISTS public.user (
   id INT NOT NULL
       GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
   username TEXT UNIQUE NOT NULL
       CHECK (username <> '')
       CONSTRAINT max_len_username CHECK(LENGTH(username) <= 100),
   password_hash TEXT NOT NULL
       CHECK (password_hash <> '')
       CONSTRAINT max_len_password_hash CHECK(LENGTH(password_hash) <= 256)
);

CREATE TABLE IF NOT EXISTS public.balance (
    id INT NOT NULL
        GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    amount INT NOT NULL DEFAULT 1000
        CHECK (amount >= 0),
    user_id INT NOT NULL UNIQUE
        REFERENCES public.user (id)
);

CREATE TABLE IF NOT EXISTS public.transaction (
    id INT NOT NULL
        GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    amount INT NOT NULL,
    sender_id INT NOT NULL
        REFERENCES public.user (id),
    receiver_id INT NOT NULL
        REFERENCES public.user (id)
);

CREATE TABLE IF NOT EXISTS public.inventory_item (
    id INT NOT NULL
        GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id INT NOT NULL
        REFERENCES public.user (id),
    merch_id INT NOT NULL
        REFERENCES public.merchandise (id)
);

CREATE OR REPLACE FUNCTION create_balance_on_user_insert()
    RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO public.balance (user_id)
    VALUES (NEW.id);
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_create_balance
AFTER INSERT ON public.user
FOR EACH ROW
EXECUTE FUNCTION create_balance_on_user_insert();

