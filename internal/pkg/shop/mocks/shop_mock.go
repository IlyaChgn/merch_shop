// Code generated by MockGen. DO NOT EDIT.
// Source: shop.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/IlyaChgn/merch_shop/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockShopStorageInterface is a mock of ShopStorageInterface interface.
type MockShopStorageInterface struct {
	ctrl     *gomock.Controller
	recorder *MockShopStorageInterfaceMockRecorder
}

// MockShopStorageInterfaceMockRecorder is the mock recorder for MockShopStorageInterface.
type MockShopStorageInterfaceMockRecorder struct {
	mock *MockShopStorageInterface
}

// NewMockShopStorageInterface creates a new mock instance.
func NewMockShopStorageInterface(ctrl *gomock.Controller) *MockShopStorageInterface {
	mock := &MockShopStorageInterface{ctrl: ctrl}
	mock.recorder = &MockShopStorageInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShopStorageInterface) EXPECT() *MockShopStorageInterfaceMockRecorder {
	return m.recorder
}

// BuyItem mocks base method.
func (m *MockShopStorageInterface) BuyItem(ctx context.Context, item string, userID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuyItem", ctx, item, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// BuyItem indicates an expected call of BuyItem.
func (mr *MockShopStorageInterfaceMockRecorder) BuyItem(ctx, item, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyItem", reflect.TypeOf((*MockShopStorageInterface)(nil).BuyItem), ctx, item, userID)
}

// GetInfo mocks base method.
func (m *MockShopStorageInterface) GetInfo(ctx context.Context, userID uint) (*models.InfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfo", ctx, userID)
	ret0, _ := ret[0].(*models.InfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInfo indicates an expected call of GetInfo.
func (mr *MockShopStorageInterfaceMockRecorder) GetInfo(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfo", reflect.TypeOf((*MockShopStorageInterface)(nil).GetInfo), ctx, userID)
}

// SendCoins mocks base method.
func (m *MockShopStorageInterface) SendCoins(ctx context.Context, receiverID, senderID uint, amount int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCoins", ctx, receiverID, senderID, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCoins indicates an expected call of SendCoins.
func (mr *MockShopStorageInterfaceMockRecorder) SendCoins(ctx, receiverID, senderID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCoins", reflect.TypeOf((*MockShopStorageInterface)(nil).SendCoins), ctx, receiverID, senderID, amount)
}
