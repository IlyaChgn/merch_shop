// Code generated by MockGen. DO NOT EDIT.
// Source: auth.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/IlyaChgn/merch_shop/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthStorageInterface is a mock of AuthStorageInterface interface.
type MockAuthStorageInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAuthStorageInterfaceMockRecorder
}

// MockAuthStorageInterfaceMockRecorder is the mock recorder for MockAuthStorageInterface.
type MockAuthStorageInterfaceMockRecorder struct {
	mock *MockAuthStorageInterface
}

// NewMockAuthStorageInterface creates a new mock instance.
func NewMockAuthStorageInterface(ctrl *gomock.Controller) *MockAuthStorageInterface {
	mock := &MockAuthStorageInterface{ctrl: ctrl}
	mock.recorder = &MockAuthStorageInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthStorageInterface) EXPECT() *MockAuthStorageInterfaceMockRecorder {
	return m.recorder
}

// Auth mocks base method.
func (m *MockAuthStorageInterface) Auth(ctx context.Context, username, password string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Auth", ctx, username, password)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Auth indicates an expected call of Auth.
func (mr *MockAuthStorageInterfaceMockRecorder) Auth(ctx, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*MockAuthStorageInterface)(nil).Auth), ctx, username, password)
}

// CheckAuth mocks base method.
func (m *MockAuthStorageInterface) CheckAuth(tokenString string) (*models.User, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAuth", tokenString)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// CheckAuth indicates an expected call of CheckAuth.
func (mr *MockAuthStorageInterfaceMockRecorder) CheckAuth(tokenString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAuth", reflect.TypeOf((*MockAuthStorageInterface)(nil).CheckAuth), tokenString)
}

// CreateToken mocks base method.
func (m *MockAuthStorageInterface) CreateToken(username string, id uint) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateToken", username, id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateToken indicates an expected call of CreateToken.
func (mr *MockAuthStorageInterfaceMockRecorder) CreateToken(username, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToken", reflect.TypeOf((*MockAuthStorageInterface)(nil).CreateToken), username, id)
}

// GetUserByUsername mocks base method.
func (m *MockAuthStorageInterface) GetUserByUsername(ctx context.Context, username string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", ctx, username)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockAuthStorageInterfaceMockRecorder) GetUserByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockAuthStorageInterface)(nil).GetUserByUsername), ctx, username)
}
